---
title: "2024_03_08_Plots"
format: html
editor: source
---

# Libraries

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(pcaExplorer)
library(purrr)
library(GeneTonic)
library(pheatmap)
library(EnhancedVolcano)
})
```

# Set up directories

```{r}
result.dir <- "2024_03_08_results/"

if(!exists(result.dir)){
  dir.create(result.dir)
}
```

## Single comparison walk through

Now that we have our DESeq data and GeneTonic object data, I want to make some plots for each comparison:

-   Heatmap of top 25 DE genes by adjusted p value

-   Heatmap of top 25 DE genes by absolute log2FC

-   Volcano plot

-   GeneTonic Gene set enrichment plot (The call it "Summary Overview")

I will also create a separate folder for each comparison to help avoid any confusion.

```{r}
load(file = paste0("2024_03_07_results/genetonic_results/HOS_CAR_sup.vs.HOS_Media.Rdata"))

deseq.df <- read.csv(file = paste0("2024_03_07_results/deseq_results/HOS_CAR_sup.vs.HOS_Media.csv"))

meta <- read.csv(file = "2024_03_07_results/2024_03_07_metadata.csv")
```

### Heatmap generation

The sample names in the counts matrix are typically displayed under each column of a heatmap. But they made the plot harder to interpret, so I did not plot them and used an annotation dataframe instead.

Another sticking point: My DESeq results have the subset counts for my heatmaps, but there is no consistent naming structure. Our samples all have `L002`, but the public data do not. Some comparisons have 6 samples, others only 4 or 5.

The best way to isolate the counts was to remove the common rows they all share: the DESeq results at the front of the dataframe, with `dplyr::select(deseq.df, -1:-10)` in this example case.

```{r}
# This removes all the columns that are not raw counts from the DESeq results
sample.df <- dplyr::select(deseq.df, -1:-10)

# Filter metadata for one of the condition comparisons
subset1 <- meta |> 
  filter(group == "HOS_CAR_sup") |> 
  pull(folder.name)

# Create the annotation dataframe where the column name is matched with its condition
anno <- data.frame(sample_name = colnames(sample.df)) |> 
  mutate(group = ifelse(sample_name %in% subset1, "HOS_CAR_sup", "HOS_Media")) |> 
  column_to_rownames("sample_name")

# defining colors for the annotation
condition <- c("orange", "blue")
names(condition) <- c("HOS_CAR_sup", "HOS_Media")
anno_colors <- list(group = condition)
```

```{r}
# Take a look at our annotation dataframes
anno
anno_colors
```

### Create and save heatmaps

Heatmap for the top 25 padj:

```{r}
deseq.df |> 
  # results are sorted by padj by default, so I started by taking the top 25 rows
  dplyr::slice(1:25) |> 
  column_to_rownames(var = "gene_symbol") |>
  # The previous line removes one of the 10 common columns, only need to remove the front 9 columns now
  dplyr::select(-1:-9) |> 
  pheatmap(scale = "row",
         fontsize = 12,
         fontsize_row = 11,
         show_colnames = FALSE,
         treeheight_col = 0,
         annotation = anno,
         annotation_colors = anno_colors,
         main = "Top 25 genes by p-value")

         # ggsave(filename = "2024_01_19_results/Mixed.CD4.B.VS.Reject.CD4.B/Mixed.CD4.B.VS.Reject.CD4.B.padj.png")
```

For (absolute) log2FC:

```{r}
deseq.df |> 
  filter(padj <= 0.05) |> 
  arrange(desc(abs(log2FoldChange))) |> 
  dplyr::slice(1:25) |> 
  column_to_rownames(var = "gene_symbol") |> 
  # The previous line removes one of the 10 common columns, only need to remove the front 9 columns now
  dplyr::select(-1:-9) |>
  pheatmap(scale = "row",
         fontsize = 12,
         fontsize_row = 11,
         show_colnames = FALSE,
         treeheight_col = 0,
         annotation = anno,
         annotation_colors = anno_colors,
         main = "Top 25 genes by absolute log2FC")

         # ggsave(filename = "2024_01_19_results/Mixed.CD4.B.VS.Reject.CD4.B/Mixed.CD4.B.VS.Reject.CD4.B.log2FC.png")
```

## Volcano plot of DE genes

```{r}
volc.plot <- EnhancedVolcano(toptable = deseq.df,
                lab = deseq.df$gene_symbol,
                x = "log2FoldChange",
                y = "padj",
                # keeping the lines below commented out for future formatting
                # xlim = c(-3, 3),
                # ylim = c(-0.5, 8),
                # FCcutoff = ,
                title = "HOS_CAR_sup vs HOS_Media",
                subtitle = "DESeq2 Results",
                pCutoff = 0.05,
                legendPosition = "none",
                caption = "") 

# volc.plot |> 
#   ggsave(filename = "2024_01_19_results/Mixed.CD4.B.vs.Reject.CD4.B/Mixed.CD4.B.VS.Reject.CD4.B.volcano.png")

# I only defined volc.plot to show the plot for presentation purposes
# you could pipe EnhancedVolcano() directly into ggsave
volc.plot
```

## GeneTonic Gene Set Enrichment - summary plot

```{r}
p <- gs_summary_overview(res_enrich = subset.topgo,
                    n_gs = 15) +
  labs(title = "Gene Set Enrichment",
       subtitle = "Mixed.CD4.B vs Reject.CD4.B") 

# This one I could not pipe directly into ggsave, so it gets a temporary value
ggsave(filename = "2024_01_19_results/Mixed.CD4.B.VS.Reject.CD4.B/Mixed.CD4.B.vs.Reject.CD4.B.summary.png",
       plot = p,
       width = 11,
       height = 8,
       units = "in",
       bg = "white")

p
```

# Plot function

Now that I generated each of our plots, I created the function to generate the rest. It's similar to the DESeq function, with condition1 and condition2 as inputs.

```{r}
plot_results <- function(condition1, condition2){
  # load in data
  load(file = paste0("2024_01_10_results/genetonic_results/", condition1, ".vs.", condition2, ".Rdata"))
  deseq.df <- read.csv(file = paste0("2024_01_10_results/deseq_results/", condition1, ".vs.", condition2, ".csv")) 
  
  # Create a result folder for the dataset
  results.folder <- paste0(folder.name, "/", condition1, ".vs.", condition2, "/")
  
  if(!exists(results.folder)){
    dir.create(results.folder)}
  
  # filter the deseq.df so we can pull out the colnames for the annotation df
  sample.df <- dplyr::select(deseq.df, -1:-10)
  
  # Filter metadata for one of the condition comparisons
  subset1 <- meta |> 
    filter(condition == condition1) |> 
    pull(folder.name)
  # change - to . to match column name format
  subset1 <- subset1 |> 
    str_replace_all("-", ".")
  # R adds X to all column names that start with a number, so we need to add X as well
  subset1 <- paste0("X", subset1)
  # Create the annotation dataframe where the column name is matched with its condition
  anno <- data.frame(sample_name = colnames(sample.df)) |> 
    mutate(condition = ifelse(sample_name %in% subset1, condition1, condition2)) |> 
    column_to_rownames("sample_name")
  
  # defining colors for the annotation
  condition <- c("orange", "blue")
  names(condition) <- c(condition1, condition2)
  anno_colors <- list(condition = condition)
  
  # Top 25 DE by padj heatmap
  deseq.df |> 
    dplyr::slice(1:25) |> 
    column_to_rownames(var = "gene_symbol") |> 
    dplyr::select(-1:-9) |> 
    pheatmap(scale = "row",
           fontsize = 12,
           fontsize_row = 11,
           show_colnames = FALSE,
           treeheight_col = 0,
           annotation = anno,
           annotation_colors = anno_colors,
           main = "Top 25 genes by p-value") |> 
           ggsave(filename = paste0(results.folder, condition1, ".vs.", condition2, ".padj.png"))
  
  # log2FC heatmap
  deseq.df |> 
    filter(padj <= 0.05) |> 
    arrange(desc(abs(log2FoldChange))) |> 
    dplyr::slice(1:25) |> 
    column_to_rownames(var = "gene_symbol") |> 
    dplyr::select(-1:-9) |> 
    pheatmap(scale = "row",
           fontsize = 12,
           fontsize_row = 11,
           show_colnames = FALSE,
           treeheight_col = 0,
           annotation = anno,
           annotation_colors = anno_colors,
           main = "Top 25 genes by absolute log2FC") |> 
           ggsave(filename = paste0(results.folder, condition1, ".vs.", condition2, ".log2FC.png"))
  
  # Volcano plot
  EnhancedVolcano(toptable = deseq.df,
                  lab = deseq.df$gene_symbol,
                  x = "log2FoldChange",
                  y = "padj",
                  # keeping the lines below commented out for future formatting
                  # xlim = c(-3, 3),
                  # ylim = c(-0.5, 8),
                  # FCcutoff = ,
                  title = paste(condition1, "vs", condition2, sep = " "),
                  subtitle = "DESeq2 Results",
                  pCutoff = 0.05,
                  legendPosition = "none",
                  caption = "") |> 
    ggsave(filename = paste0(results.folder, condition1, ".vs.", condition2, ".volcano.png"))
  
  # Enriched gene set summary plot
  p <- gs_summary_overview(res_enrich = subset.topgo, n_gs = 15) +
    labs(title = "Gene Set Enrichment",
         subtitle = paste(condition1, "vs", condition2, sep = " "))
  
  ggsave(filename = paste0(results.folder, condition1, ".vs.", condition2, ".pathways.png"),
         plot = p,
         width = 11,
         height = 8,
         units = "in",
         bg = "white")
}
```

## Inputs for function

Now we can create our vectors/lists for the function input.

```{r}
condition1 = c()

condition2 = c()
```

## Run the function

map2() verison

```{r, eval=FALSE}
map2(condition1, condition2, plot_results)
```

Finished!

```{r}
sessionInfo()
```
