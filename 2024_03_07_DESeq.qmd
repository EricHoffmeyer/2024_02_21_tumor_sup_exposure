---
title: "2024_02_09_Code_Review"
editor: source
format: 
  html:
    page-layout: full
    df-print: kable
---

# Experimental Design

# Load Libraries

These libraries are required.

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(DESeq2)
library(pcaExplorer)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(topGO)
library(purrr)
library(GeneTonic)
library(pheatmap)
library(EnhancedVolcano)
})
```

# Set up directories

```{r}
result.dir <- "2024_03_07_results/"

if(!exists(result.dir)){
  dir.create(result.dir)
}

deseq.dir <- "2024_03_07_results/deseq_results/"

if(!exists(deseq.dir)){
  dir.create(deseq.dir)
}

genetonic.dir <- "2024_03_07_results/genetonic_results/"

if(!exists(genetonic.dir)){
  dir.create(genetonic.dir)
}

data.dir <- "data/salmon_output_files/"
```

# Read in metadata

```{r}
meta <- read.csv(file = "data/20240215_LH00407_0019_B22HHTTLT3_L1_Verneris_demux.csv")

head(meta)
```

I'll add a column with folder names to facilitate reading in the `quant.sf` files.

They did not make an in-depth metadata file; this is the basic .csv file the sequencing core returns. But I can use the `Sample` column to make new columns that I can use for the DESeq comparisons.

```{r}
meta <- meta |> 
  mutate(condition = case_when(str_detect(Sample, "HOS_D1") ~ "HOS_D1",
                               str_detect(Sample, "HOS_D2") ~ "HOS_D2",
                               str_detect(Sample, "HOS_D3") ~ "HOS_D3",
                               str_detect(Sample, "HOS_Media") ~ "HOS_Media",
                               str_detect(Sample, "OS_17_D1") ~ "OS_17_D1",
                               str_detect(Sample, "OS_17_D2") ~ "OS_17_D2",
                               str_detect(Sample, "OS_17_D3") ~ "OS_17_D3",
                               str_detect(Sample, "OS_17_Media") ~ "OS_17_Media"),
         group = case_when(str_detect(Sample, "HOS_D") ~ "HOS_CAR_sup",
                           str_detect(Sample, "HOS_Media") ~ "HOS_Media",
                           str_detect(Sample, "OS_17_D") ~ "OS_17_CAR_sup",
                           str_detect(Sample, "OS_17_Media") ~ "OS_17_Media"),
         folder.name = c("HOS_D1_1_S1_L001",
                                  "HOS_D1_2_S2_L001",
                                  "HOS_D1_3_S3_L001",
                                  "HOS_D2_1_S4_L001",
                                  "HOS_D2_2_S5_L001",
                                  "HOS_D2_3_S6_L001",
                                  "HOS_D3_1_S7_L001",
                                  "HOS_D3_2_S8_L001",
                                  "HOS_D3_3_S9_L001",
                                  "HOS_Media_1_S10_L001",
                                  "HOS_Media_2_S11_L001",
                                  "OS_17_D1_1_S12_L001",
                                  "OS_17_D1_2_S13_L001",
                                  "OS_17_D1_3_S14_L001",
                                  "OS_17_D2_1_S15_L001",
                                  "OS_17_D2_2_S16_L001",
                                  "OS_17_D2_3_S17_L001",
                                  "OS_17_D3_1_S18_L001",
                                  "OS_17_D3_2_S19_L001",
                                  "OS_17_D3_3_S20_L001",
                                  "OS_17_Media_1_S21_L001",
                                  "OS_17_Media_2_S22_L001"),
         .after = Sample)
```

Save updated metadata for future use

```{r}
write.csv(meta, file = paste0(result.dir, "2024_03_07_metadata.csv"))
```


## Creating counts matrix

### Create and save/load gtf_df

Import the mouse gtf file. We use this to convert the transcript IDs from the quant files to gene IDs for DESeq.

```{r}
options(future.globals.maxSize = 14000 * 1024^2)
```


```{r}
gtf <-  rtracklayer::import("data/Homo_sapiens.GRCh38.106.gtf")

gtf_df <- as.data.frame(gtf)

head(gtf_df)
```

Create a look-up-table matching gene id to all its transcript ids:

```{r}
tx2gene.df <- gtf_df |>
  dplyr::select(transcript_id, gene_id) |>
	distinct(transcript_id, gene_id) |>
  drop_na() -> tx2gene.df

head(tx2gene.df)
```

### Read in salmon quant.sf files using a loop

This chunk reads the first `quant.sf` and joins it with the `tx2gene.df`.

```{r}
tmp <-  read.delim(paste0("data/salmon_output_files/",
                          meta$folder.name[1], "/quant.sf")) |>
  mutate(Name = str_sub(Name, end=-3)) |>
  inner_join(tx2gene.df, by=c("Name"="transcript_id")) |>
  group_by(gene_id) |>
  summarise(NumReads=as.integer(sum(NumReads)))
head(tmp)
```

Now we pre-define an empty count matrix to the correct dimensions. Then we will perform a loop to read the quant files and fill in the matrix one column at a time.

```{r}
sf.df <-  data.frame(matrix(0, 
                            nrow = length(tmp$gene_id),
                            ncol = length(meta$folder.name)))

colnames(sf.df) <-  meta$folder.name
rownames(sf.df) <-  tmp$gene_id

for(i in seq_along(meta$folder.name)){
  cat("Now reading...", meta$folder.name[i], "\n")
  
  sf.df[,i] <-  read.delim(paste0("data/salmon_output_files/", meta$folder.name[i], "/quant.sf")) |>
    mutate(Name = str_sub(Name, end = -3)) |>
    inner_join(tx2gene.df, by = c("Name" = "transcript_id")) |>
    group_by(gene_id) |>
    summarise(NumReads = as.integer(sum(NumReads))) |>
    pull(NumReads)
}
```

Take a look at the sf.df

```{r}
head(sf.df)
```

## DESeq analysis - single comparison walk through

I will start by comparing a single donor to the media control. Then I can create a loop to perform all the other donor to control DESeq comparisons. Then I will combine all the donors together and compare them against the control

```{r}
# Take a look at the conditions again
meta |> 
  dplyr::count(condition)
```

This comparison will use the following:

-   condition 1 : `HOS_D1`

-   condition 2 : `HOS_Media`

The code chunk below creates a vector containing the names of the samples in our comparison. It uses the vector to subset the counts matrix, filters out any genes with \< 10 reads in any of the subset samples, and subsets the metadata

```{r}
#Subset metadata to the conditions of interest and pull out those sample names
subset.vector <- meta |>
  dplyr::filter(condition == "HOS_D1" | condition == "HOS_Media") |>
  dplyr::pull(folder.name)

subset.vector

# Subset the sf.df
subset.sf.df <- sf.df |> 
  dplyr::select(all_of(subset.vector)) 

# Use subset.vector to filter the original sf.df object
subset.sf.df <- subset.sf.df |> 
  mutate(row.sum = apply(subset.sf.df, 1, function(x) sum(x > 10))) |> 
  # All values must be more than 10 (set to x if only x value is satisfied)
  dplyr::filter(row.sum == length(subset.vector)) |> 
  # Remove row.sum, it is not needing moving forward
  dplyr::select(-row.sum)

# Filtering metadata so only relevant samples are put into the DESeq object
subset.meta <- meta |> 
  filter(folder.name %in% subset.vector)

head(subset.sf.df)
```

### Subset matrix, QC check, and DESeqDataSet (dds) creation

```{r}
# DESeq needs a matrix, not a dataframe, so I convereted the subset.sf.df
subset.matrix <- as.matrix(subset.sf.df)

# building column data for the SE object with sample names, the conditions, and the row names.
subset.coldata <- data.frame(sample = subset.meta$folder.name,
                      condition = as.factor(subset.meta$condition),
                      row.names = "sample")
```

Quick check that my column data rows match the column names in the salmon matrix

```{r}
all(rownames(subset.coldata) %in% colnames(subset.matrix))
```

Create SummarizedExperiment() obejct

```{r}
subset.se <- SummarizedExperiment(assays = list(counts = subset.matrix),
                                  colData = subset.coldata)
subset.se
```

Create DESeqDataSet() object

```{r}
subset.dds <- DESeqDataSet(subset.se, design = ~ condition)
```


### Run DESeq

```{r}
subset.dds <-  DESeq(subset.dds)

# Create a results table of our comparison of interest
subset.res <- results(subset.dds,
                        contrast = c("condition", "HOS_D1", "HOS_Media"),
                        alpha = 0.05)
```

### DESeq results in an annotated table

Now we turn the results object into a dataframe with gene annotation, add some extra annotation (`gene_symbol`, `gene_entrez`, `gene_desc`) and use `left_join` to include the raw count data. Converting the Ensembl ID row names of `subset.sf.df` allows us to join the raw counts to the result dataframe by the shared Ensembl ID column called `gene_id` in both dataframes.

It is good practice to include the raw counts in the results to confirm the comparisons were done correctly.

```{r}
subset.ids <- subset.sf.df |> 
  rownames_to_column(var = "gene_id")

subset.anno <- deseqresult2df(subset.res) |> 
  dplyr::rename(gene_id = id) |> 
  mutate(gene_symbol = mapIds(org.Hs.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "SYMBOL", 
                              multiVals = "first")) |> 
  mutate(gene_entrez = mapIds(org.Hs.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "ENTREZID", 
                              multiVals = "first")) |> 
  mutate(gene_desc = mapIds(org.Hs.eg.db, 
                            keys = gene_id, 
                            keytype = "ENSEMBL", 
                            column = "GENENAME", 
                            multiVals = "first")) |> 
  relocate(gene_symbol, gene_entrez, gene_desc, .after = gene_id) |> 
  left_join(subset.ids, 
            by = c("gene_id"="gene_id")) |> 
  na.omit()

head(subset.anno)
```

Save the DESeq results separately.

```{r}
write_csv(subset.anno, file = paste0(deseq.dir, "HOS_D1.vs.HOS_Media.csv"))
```

## GeneTonic

### Gene set enrichment & GeneTonic Prep

Gene set Enrichment needs:

GeneTonic needs:

-   A DESeqDataSet (`subset.dds`) object, which we already created.

-   A DESEq results object (`subset.res`), which we also already created.

-   A gene annotation object. This is a two column dataframe with gene_id and gene name (`sf.df.anno`)

-   An enriched results object (a DESeq results object filtered to significant genes and run through enrichment analysis, `subset.topgo`)

    -   This step also needs background genes, `bg_ids`

![](Code%20Review%20Figures/DESeq%20and%20GeneTonic%20pipeline.png){fig-align="center"}

#### Gene annotation object

```{r}
sf.df.anno <- deseqresult2df(subset.res) |> 
  dplyr::rename(gene_id = id) |> 
  mutate(gene_name = mapIds(org.Hs.eg.db, 
                            keys = gene_id, 
                            keytype = "ENSEMBL", 
                            column = "SYMBOL", 
                            multiVals = "first")) |> 
  dplyr::select(gene_id, gene_name)

head(sf.df.anno)
```

#### Background gene symbols

Gene set enrichment needs the enriched results as well as the background genes, `bg_ids`. These are the genes that passed the filtering step but may or may not be differentially expressed.

```{r}
bg_ids <- deseqresult2df(subset.res) |> 
  mutate(Symbol = mapIds(org.Hs.eg.db, 
                         keys = id, 
                         keytype = "ENSEMBL", 
                         column = "SYMBOL", 
                         multiVals = "first")) |> 
  pull(Symbol)

length(bg_ids)
head(bg_ids)
```

#### Enriched results object

The enriched object is the list of differentially expressed (DE) genes (p \< 0.05 in this analysis)

```{r}
subset.enrich <- deseqresult2df(subset.res) |> 
  mutate(Symbol = mapIds(org.Hs.eg.db, 
                         keys = id, 
                         keytype = "ENSEMBL", 
                         column = "SYMBOL", 
                         multiVals = "first")) |> 
  dplyr::filter(padj < 0.00000000000000001) |> 
  pull(Symbol)

length(subset.enrich)

head(subset.enrich)
```

### Perform Enrichment Analysis

Enrichment analysis takes the DE genes and the background genes and looks for which Gene Ontologies (GO) are enriched in the DE genes.

```{r}
subset.topgo <- pcaExplorer::topGOtable(subset.enrich,
                                       bg_ids,
                                       ontology = "BP",
                                       mapping = "org.Hs.eg.db",
                                       geneID = "symbol")
head(subset.topgo)

# Convert the topGOtable for straightforward use in GeneTonic
subset.topgo <- shake_topGOtableResult(subset.topgo)
head(subset.topgo)

# This computes Z scores for each gene set and adds it to the topgo object
subset.topgo <- get_aggrscores(subset.topgo, subset.res, sf.df.anno)

head(subset.topgo)
```

### Save Genetonic object

```{r}
save(subset.dds, subset.res, subset.topgo, sf.df.anno, 
     file = paste0(genetonic.dir, "HOS_D1.vs.HOS_Media.Rdata"))
```

### Run GeneTonic

```{r}
load(file = paste0(genetonic.dir, "HOS_CAR_sup.vs.HOS_Media.Rdata"))
```

```{r, eval=FALSE}
GeneTonic(dds = subset.dds,
          res_de = subset.res,
          res_enrich = subset.topgo,
          annotation_obj = sf.df.anno,
          project_id = "HOS D1 vs HOS Media")
```

------------------------------------------------------------------------

# Subset, DESeq, GeneTonic function

Next, I wrote the function that can subset the data, perform DESeq, save the results, and build/save a GeneTonic object.

The only essential inputs for a function like this are the comparison conditions, called `condition1` and `condition2`.

The code chunk below is quite large, but it essentially just the last \~10 code chunks combined

```{r}
deseq_and_genetonic <- function(condition1, condition2) {
  
  # Create a vector that has the samples we want to compare
  subset.vector <- meta |> 
    # dplyr::filter(condition == condition1 | condition == condition2) |> # use for condition comparisons
    dplyr::filter(group == condition1 | group == condition2) |> # use for group comparisons
    pull(folder.name)
  
  # Subset the sf.df
  subset.sf.df <- sf.df |> 
    dplyr::select(all_of(subset.vector)) 
  
  # Filter out low counts
  subset.sf.df <- subset.sf.df |> 
    mutate(row.sum = apply(subset.sf.df, 1, function(x) sum(x > 10))) |> 
    # All values must be more than 10 (set to x if only x value is satisfied)
    dplyr::filter(row.sum == length(subset.vector)) |> 
    # Remove row.sum, it is not needing moving forward
    dplyr::select(-row.sum)

  # Filtering metadata so only relevant samples are put into the DESeq object
  subset.meta <- meta |> 
    filter(folder.name %in% subset.vector)
  
  # Create subset salmon matrix
  subset.matrix <- as.matrix(subset.sf.df)
  
  # Create a dataframe of subset samples and their condition, need to created SE object
  subset.coldata <- data.frame(sample = subset.meta$folder.name,
                        # condition = as.factor(subset.meta$condition), # condition comparison
                        group = as.factor(subset.meta$group), # group comparison
                        row.names = "sample")
  # Create SE object
  subset.se <- SummarizedExperiment(assays = list(counts = subset.matrix),
                             colData = subset.coldata)
  
  # Create DDS object
  # subset.dds <-  DESeqDataSet(subset.se, design = ~ condition) # condition comparison
  subset.dds <- DESeqDataSet(subset.se, design = ~ group) # group comparison
  
  # DESeq and results looking at our subsetted samples
  subset.dds = DESeq(subset.dds)
  
  subset.res <- results(subset.dds,
                          # contrast = c("condition", condition1, condition2), # condition comparison
                          contrast = c("group", condition1, condition2), # group comparison
                          alpha = 0.05)
  
  # Create annotated results, join it to raw counts, and filter out NA genes
  subset.ids <- subset.sf.df |> 
  rownames_to_column(var = "gene_id")

  subset.anno <- deseqresult2df(subset.res) |> 
    dplyr::rename(gene_id = id) |> 
    mutate(gene_symbol = mapIds(org.Hs.eg.db, 
                                keys = gene_id, 
                                keytype = "ENSEMBL", 
                                column = "SYMBOL", 
                                multiVals = "first")) |> 
    mutate(gene_entrez = mapIds(org.Hs.eg.db, keys = gene_id, 
                                keytype = "ENSEMBL", 
                                column = "ENTREZID", 
                                multiVals = "first")) |> 
    mutate(gene_desc = mapIds(org.Hs.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "GENENAME", 
                              multiVals = "first")) |> 
    relocate(gene_symbol, gene_entrez, gene_desc, .after = gene_id) |> 
    left_join(subset.ids, 
              by = c("gene_id"="gene_id")) |> 
    na.omit()
  
  # write csv file
  write_csv(subset.anno, file = paste0(deseq.dir, condition1, ".vs.", condition2, ".csv"))
  
  # GeneTonic Prep
  ## Enriched results object
  subset.enrich <- deseqresult2df(subset.res) |> 
    mutate(Symbol = mapIds(org.Hs.eg.db, 
                           keys = id, 
                           keytype = "ENSEMBL", 
                           column = "SYMBOL", 
                           multiVals = "first")) |> 
    dplyr::filter(padj < 0.00000000000000001) |> # for donor vs media comparisons and group comparison
    # dplyr::filter(padj < 0.05) |> # for donor vs donor comparisons
    pull(Symbol)
  
  ## Background gene symbols
  bg_ids <- deseqresult2df(subset.res) |> 
    mutate(Symbol = mapIds(org.Hs.eg.db, 
                           keys = id, 
                           keytype = "ENSEMBL", 
                           column = "SYMBOL", 
                           multiVals = "first")) |> 
    pull(Symbol)
  
  ### Gene annotation object
  sf.df.anno <- deseqresult2df(subset.res) |> 
    dplyr::rename(gene_id = id) |> 
    mutate(gene_name = mapIds(org.Hs.eg.db, 
                              keys = gene_id, 
                              keytype = "ENSEMBL", 
                              column = "SYMBOL", 
                              multiVals = "first")) |> 
    dplyr::select(gene_id, gene_name)
  
  ## Perform Enrichment Analysis
  subset.topgo = pcaExplorer::topGOtable(subset.enrich,
                                         bg_ids,
                                         ontology = "BP",
                                         mapping = "org.Hs.eg.db",
                                         geneID = "symbol")
  
  ## Reshape for Genetonic
  subset.topgo <- shake_topGOtableResult(subset.topgo)
  subset.topgo <- get_aggrscores(subset.topgo, subset.res, sf.df.anno)
  
  # save info for GeneTonic
  save(subset.dds, subset.res, subset.topgo, sf.df.anno, file = paste0(genetonic.dir, condition1, ".vs.", condition2, ".Rdata"))
}
```

## Using the function with purrr

I can use `map2()` to run the function in its current form. What's nice about `map2()` is that you can input two vectors. It will run the function using the first element in each vector, then repeat with the second, then the third, and so on.

These are the vectors I used for with `map2()`

```{r}
condition1 = c("HOS_D2", "HOS_D3", "OS_17_D1", "OS_17_D2", "OS_17_D3")

condition2 = c("HOS_Media", "HOS_Media", "OS_17_Media", "OS_17_Media", "OS_17_Media")
```

```{r, eval=FALSE}
map2(condition1, condition2, deseq_and_genetonic)
```

We know there can be significant variation in activity between donor T cells, so let's also compare the donor conditions to each other. The difference will not be as great as comparing donors vs control, so I will reset the function using a p value of 0.05 for the pathway analysis. Look for commented lines in the function.

```{r}
condition3 = c("HOS_D1", "HOS_D1", "HOS_D2", "OS_17_D1", "OS_17_D1", "OS_17_D2")

condition4 = c("HOS_D2", "HOS_D3", "HOS_D3", "OS_17_D2", "OS_17_D3", "OS_17_D3")
```

```{r, eval=FALSE}
map2(condition3, condition4, deseq_and_genetonic)
```

I also want to combine each of the donors (for each tumor cell line) and compare them against their respective media control. This will be done using the `group` column created earlier. Again I have to alter the function for this. Look for commented lines mentioning group comparisons.

```{r}
condition5 <- c("HOS_CAR_sup", "OS_17_CAR_sup")

condition6 <- c("HOS_Media", "OS_17_Media")
```

```{r}
map2(condition5, condition6, deseq_and_genetonic)
```


End

```{r}
sessionInfo()
```